environment:
  global:
    PIP_CACHE_DIR: "pip_cache"
    SWIG_VERSION: "3.0.12"

  matrix:
    - PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python27-x64"
      DISTUTILS_USE_SDK: "1"
    - PYTHON: "C:\\Python34"
    - PYTHON: "C:\\Python34-x64"
      DISTUTILS_USE_SDK: "1"
    - PYTHON: "C:\\Python35"
    - PYTHON: "C:\\Python35-x64"
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python36-x64"

matrix:
  fast_finish: true

cache:
  - pip_cache -> appveyor.yml

init:
  - "ECHO %PYTHON%"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  - "7z x appveyor\\swigwin.zip"
  - "ls appveyor"
  - "SET PATH=appveyor\\swigwin-%SWIG_VERSION%;%PATH%"

  - "%PYTHON%/python -m pip install pip setuptools>=34.0 nose twine wheel --upgrade"
  - "appveyor\\build.cmd python appveyor/build_glpk.py"
  - "appveyor\\build.cmd python setup.py install"

build: off

test_script:
  - "mkdir testdir"
  - "copy test_swiglpk.py testdir\\test_swiglpk.py"
  - "dir"
  - "cd testdir"
  - "dir"
  - "%PYTHON%\\python -m nose -v"
  - "cd .."
  - "dir"

after_test:
  - "appveyor\\build.cmd python setup.py bdist_wheel"
  - "appveyor\\build.cmd python setup.py bdist_wininst"
  - ps: "ls dist"

artifacts:
  - path: dist\*
